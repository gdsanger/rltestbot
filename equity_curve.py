import pandas as pd
from typing import Optional
from data_fetcher import fetch_recent_candles


def calculate_equity_curve(
    log_path: str,
    initial_capital: float = 1000.0,
    symbol: str = "BTCUSDT",
    testnet: bool = False,
    return_plot: bool = False,
    close_prices: Optional[pd.Series] = None,
):
    """Calculate portfolio equity curve based on a trading log.

    Parameters
    ----------
    log_path : str
        Path to ``trading_log.csv`` generated by the environment.
    initial_capital : float, optional
        Starting account value, by default 1000.0.
    symbol : str, optional
        Trading pair for fetching recent candles, by default ``"BTCUSDT"``.
    testnet : bool, optional
        Whether to use the Binance Spot Testnet, by default ``False``.
    return_plot : bool, optional
        If ``True``, return a ``matplotlib`` figure instead of a
        :class:`pandas.Series`.
    close_prices : pandas.Series, optional
        Pre-fetched close prices to use. If ``None`` they will be fetched
        via :func:`fetch_recent_candles`.

    Returns
    -------
    pandas.Series or matplotlib.figure.Figure
        Equity curve indexed by step or a plot if ``return_plot`` is ``True``.
    """

    log = pd.read_csv(log_path)

    if close_prices is None:
        df = fetch_recent_candles(
            symbol=symbol,
            limit=len(log) + 1,
            return_df=True,
            testnet=testnet,
        )
        close_prices = df["close"]
    else:
        close_prices = pd.Series(close_prices).reset_index(drop=True)

    realized = 0.0
    position = 0
    entry_price = 0.0
    equity = []

    for i, row in log.iterrows():
        realized += row.get("realized_pnl", 0.0)

        # Update position and entry price when trade occurs
        if row.get("action") == 1:
            if position != 1:
                position = 1
                entry_price = row.get("price", entry_price)
        elif row.get("action") == 2:
            if position != -1:
                position = -1
                entry_price = row.get("price", entry_price)

        current_price = close_prices.iloc[i]
        open_pnl = (current_price - entry_price) * position if position != 0 else 0.0
        equity.append(initial_capital + realized + open_pnl)

    equity_series = pd.Series(equity, name="equity")

    if return_plot:
        import matplotlib.pyplot as plt

        fig, ax = plt.subplots(figsize=(10, 4))
        equity_series.plot(ax=ax)
        ax.set_xlabel("Step")
        ax.set_ylabel("Equity")
        ax.set_title("Equity Curve")
        fig.tight_layout()
        return fig

    return equity_series
